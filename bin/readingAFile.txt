Reading a file is done using the Scanner class.
When we want to read a file using the Scanner class, we give the path for the file we want to read as a parameter to the constructor of the class
The path to the file can be acquired using Java's Paths.get() command
The Paths.get() command is given the file's name in string format as a parameter:
    Paths.get("filename.extension")

When the Scanner object that reads the file has been created, the file can be read using a while loop
The reading proceeds until all the lines of the file have been read, i.e. until all the lines of the file have been read

Reading a file may result in an error, and its for this reason that the process requires separate blocks
    One block for the "try", and another to "catch" potential errors.

// first
import java.util.Scanner;
import java.nio.file.Paths;

// in the program:

// we create a scanner for reading the file
try (Scanner scanner = new Scanner(Paths.get("file.txt"))) {

    // we read the file until all lines have been read
    while (scanner.hasNextLine()) {
        // we read one line
        String row = scanner.nextLine();
        // we print the line that we read
        System.out.println(row);
    }
} catch (Exception e) {
    System.out.println("Error: " + e.getMessage());
}


Sometimes an empty line finds its way into a file. 
Skipping an empty line can be done using the command "continue" and the isEmpty method of the string

// we create a scanner for reading the file
try (Scanner scanner = new Scanner(Paths.get("henkilot.csv"))) {

    // we read all the lines of the file
    while (scanner.hasNextLine()) {
        String line = scanner.nextLine();

        // if the line is blank we do nothing
        if (line.isEmpty()) {
            continue;
        }

        // do something with the data

    }
} catch (Exception e) {
    System.out.println("Error: " + e.getMessage());
}